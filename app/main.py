from contextlib import asynccontextmanager

from fastapi import FastAPI, Request, WebSocket, WebSocketDisconnect, status
from fastapi.exceptions import RequestValidationError
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse

from app.api.router import api
from app.common.api_message import KeyResponse
from app.common.http_exception import HTTP_ERROR
from app.core.config import settings
from app.core.middleware import LoggingMiddleware
from app.db import Mongo
from app.socket import manager


@asynccontextmanager
async def lifespan(_: FastAPI):    
    # on_startup
    await Mongo.initialize()
    yield
    # on_shutdown
app = FastAPI(
    title = "QRBusiness Backend",
description = """
### üîπ T√≠nh nƒÉng

- **Qu·∫£n l√Ω doanh nghi·ªáp**  
  T·∫°o v√† qu·∫£n l√Ω th√¥ng tin doanh nghi·ªáp, chi nh√°nh, khu v·ª±c, b√†n/ph√≤ng (service unit).

- **Qu·∫£n l√Ω ng∆∞·ªùi d√πng & ph√¢n quy·ªÅn**  
  ƒêƒÉng k√Ω, ƒëƒÉng nh·∫≠p, ph√¢n quy·ªÅn theo nh√≥m (qu·∫£n l√Ω, nh√¢n vi√™n, k·∫ø to√°n, ...), ki·ªÉm so√°t truy c·∫≠p theo vai tr√≤, chi nh√°nh.

- **Qu·∫£n l√Ω s·∫£n ph·∫©m & menu**  
  Th√™m, s·ª≠a, x√≥a s·∫£n ph·∫©m, ph√¢n lo·∫°i, x√¢y d·ª±ng menu ƒë·ªông cho t·ª´ng chi nh√°nh.

- **ƒê·∫∑t m√≥n & x·ª≠ l√Ω ƒë∆°n h√†ng**  
  ƒê·∫∑t m√≥n qua QR code, t·∫°o ƒë∆°n h√†ng, c·∫≠p nh·∫≠t tr·∫°ng th√°i, x·ª≠ l√Ω thanh to√°n

- **Y√™u c·∫ßu ph·ª•c v·ª• & t∆∞∆°ng t√°c real-time**  
  G·ª≠i y√™u c·∫ßu ph·ª•c v·ª•, g·ªçi m√≥n, thanh to√°n, k·∫øt n·ªëi qua WebSocket

- **Qu·∫£n l√Ω nh√≥m quy·ªÅn**  
  T·∫°o nh√≥m, g√°n quy·ªÅn, ki·ªÉm so√°t truy c·∫≠p chi ti·∫øt t·ªõi t·ª´ng ch·ª©c nƒÉng.

---

### üîí B·∫£o m·∫≠t

- X√°c th·ª±c JWT, ph√¢n quy·ªÅn ch·∫∑t ch·∫Ω theo doanh nghi·ªáp, chi nh√°nh, nh√≥m v√† vai tr√≤.
- Qu·∫£n l√Ω phi√™n ƒëƒÉng nh·∫≠p, ki·ªÉm so√°t truy c·∫≠p API v√† WebSocket.

---

### üìö T√†i li·ªáu

- Swagger UI: `/docs`  
- ReDoc: `/redoc`
""",
    debug = False,
    lifespan = lifespan,
    version = settings.APP_VERSION,
)
# Middleware
app.add_middleware(LoggingMiddleware)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)
# Endpoint
app.include_router(api)
# WebSocket
@app.websocket("/ws")
async def websocket(websocket: WebSocket):
    await manager.connect(websocket)
    try:
        while True:
            await websocket.receive_text()
    except WebSocketDisconnect:
        await manager.disconnect(websocket)
# Handle Exception
@app.exception_handler(HTTP_ERROR)
async def exception_handler(_: Request, exc: HTTP_ERROR):
    return JSONResponse(
        status_code=exc.status_code,
        content=exc.detail
    )
@app.exception_handler(RequestValidationError)
async def validation_exception_handler(_, exc: RequestValidationError):
    return JSONResponse(
        status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
        content={
            "message":KeyResponse.VALIDATION_ERROR,
            "error":[
                f"{error['msg']} {error['loc']}" for error in exc.errors()
            ]
        }
    )